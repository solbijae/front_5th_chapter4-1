name: Deploy Next.js to S3 and invalidate CloudFront

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci collect --config=.lighthouserc.js

      - name: Parse and upload to Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          for REPORT in .lighthouseci/lhr-*.json; do
            URL=$(jq -r '.finalUrl' "$REPORT")
            PERFORMANCE=$(jq '.categories.performance.score * 100' "$REPORT")
            ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' "$REPORT")
            BEST=$(jq '.categories["best-practices"].score * 100' "$REPORT")
            SEO=$(jq '.categories.seo.score * 100' "$REPORT")

            JSON=$(jq -n \
              --arg url "$URL" \
              --arg date "$(date -I)" \
              --argjson performance "$PERFORMANCE" \
              --argjson accessibility "$ACCESSIBILITY" \
              --argjson best "$BEST" \
              --argjson seo "$SEO" \
              '{
                parent: { database_id: env.NOTION_DATABASE_ID },
                properties: {
                  "URL": { title: [{ text: { content: $url } }] },
                  "날짜": { date: { start: $date } },
                  "Performance": { number: $performance },
                  "Accessibility": { number: $accessibility },
                  "Best Practices": { number: $best },
                  "SEO": { number: $seo }
                }
              }')

            # curl 실행 + 응답 저장
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.notion.com/v1/pages \
              -H "Authorization: Bearer $NOTION_TOKEN" \
              -H "Content-Type: application/json" \
              -H "Notion-Version: 2022-06-28" \
              --data "$JSON")

            # HTTP 상태코드 분리
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)

            echo "HTTP status: $HTTP_STATUS"
            echo "Response body: $RESPONSE_BODY"

            # 상태코드 200 또는 201 아니면 실패 처리
            if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "201" ]; then
              echo "Error: Notion API request failed"
              echo "$RESPONSE_BODY"
              exit 1
            fi
          done
